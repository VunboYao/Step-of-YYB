1. 两种书写方式：
	字面量：/pattern/flags
	构造函数：new RegExp(pattern [, flags])
	参数 pattern 是一个字符串，指定正则表达式的模式或其他正则表达式
	参数 [,flags] 是一个可选的字符串。包含 g（global, 全局搜索）、i（ignoreCase, 不区分大小写搜索）和 m（multiline, 多行搜索）
	
2. 特殊字符
	\	
		1. 将其后的特殊字符，转义为字面量
		2. 在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释
		
	^	匹配输入的开始。如果多行标志被设置为true, 那么也匹配换行符后紧跟的位置
	$	匹配输入的结束。如果多行表示被设置为true, 那么也匹配换行符前的位置
	*	匹配前一个表达式 0 次或多次。 等价于{0,}
	+	匹配前面一个表达式 1 次或者多次。 等价于{1,}
	?	匹配前面一个表达式 0 次或者 1次。 等价于{0，1}
	.	匹配除换行符之外的任何当个字符
	
	(x)    匹配'x'并且记住匹配项。括号被成为捕获括号
	(?:x)	匹配'x'但是不记住匹配项。 非捕获括号
	x(x?=y)	匹配'x'仅仅当'x'后面跟着'y'	这种叫做正向肯定查找
	x(x!y)	匹配'x'仅仅当'x'后面不跟着'y'，正向否定查找
	x|y		匹配'x'或'y'
	{n}		n是一个正整数，匹配前面一个字符n次
	{n,m}	n和m都是整数。匹配前面的字符至少n次，最多m次。如果n或者m的值是0，这个值被忽略
	[xyz]	一个字符集合。匹配方括号中的任意字符，包括转义序列。
	[^xyz]	一个反向字符集。匹配任何没有包含在方括号中的字符。匹配第一个则结束
	[\b]	匹配一个退格
	
	\b    匹配一个次的边界。一个词的边界就是一个词不被另外一个词跟随的位置或者不是另一个词汇字符前边的位置。
	\B    匹配一个非单词边界
	\cX	  当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制字符
	
	\d	  匹配一个数字。等价于[0-9]
	\D	  匹配一个非数字。 等价于[^0-9]
	\f    匹配一个换页符
	\n	  匹配一个换行符
	\r    匹配一个回车符
	\s	  匹配一个空白字符，包括空格，制表符，换页符和换行符
	\S	  匹配一个非空白字符
	\t	  匹配一个水平制表符
	\v	  匹配一个垂直制表符
	\w	  匹配一个单字字符（字母、数字或者下划线）。等价于[A-Za-z0-9_]
	\W	  匹配一个非单字字符。 等价于[^A-Za-z0-9_]
	\O    匹配null字符
	\n	  当 n 是一个正整数，一个返回引用到最后一个与有n插入的正值表达式(counting left parentheses)匹配的副字符串
	
3. RegExp对象方法
	test()方法检索字符串中是否存在制定的值。返回值 true/false
		pattern.test(测试的内容)
	
	exec()方法检索字符串中的指定值。返回值是被找到的值，如果没有匹配，则返回null。返回值为一个数组，包含值，索引，测试的内容等。
		pattern.exec(测试的内容)
	
	compile() 既可以改变检索模式，也可以添加或者删除第二个参数
	
4. 支持正则表达式的String对象的方法
	search检索与正则表达式相匹配的值。返回值为索引
		'string'.search(/r/);   // 2
	
	match找到一个或多个正则表达式的匹配。有g时返回包含的值为一个数组
		"1 plus 2 equal 3, 8".match(/\d+/g);   // ['1','2','3','8']
	
	replace替换与正则表达式匹配的字串
		'Vunbo Yao'.replace(/Vunbo/, 'George');		// George Yao
		当替换的内容为函数时。
		xxx.replace(/regexp/, function(...argu) {
			console.log(argu)	// 惊喜礼包
		}
	
	
	
	
	
	
	