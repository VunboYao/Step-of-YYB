1. 全局安装Vue 
	npm i vue -g
		查询版本：npm view vue version
2. 全局安装vue-cli ----------------------------------项目开发无需安装vue,cli中包含
	npm i vue-cli -g
		查询版本： vue -V
3. 项目初始化
	vue init webpack 项目文件名

4. style中scoped，样式私有化	

5. vue-router
	<router-view/> ：路由视图界面
	<router-link to='/'> : 传统a标签 
	
	二级路由：
		children: [
			{ path: '/', component: 父组件 }, // 基于父组件的根路径，不是根路径
			{ path: 'xx', component: 子组件 } // 路径前没有‘/’
		]
	
	路由中参数传递：
		A：标签中to传参
			<router-link :to="{name: xxx, params: {key: value}}">ValueString</router-link>
		B: 路由中url传参
			path: '/params/:newsId/:newsTitle'
			
	路由中参数获取：$route.params.XXX
	
	路由重定向： redirect: '/'
		若重定向路径需要参数，直接添加参数。redirect: '/params/:newsId/:newsTitle'
	
	别名：alias: '/xxx'    不同url，系统页面
	
	路径去除‘#’： { mode: 'history' }
	
	404页面路径：path: '*'
	
	路由中钩子函数：beforeEnter, 路由配置项中配置
		beforeEnter: (to, from, enter) => {
			console.log(to);    				跳转的页面的信息
			console.log(from);                  链接的发起路径信息
			next({path: '/'})  					跳转到某个界面  
			next() === next(true) 				默认跳转 
			next(false) === 不写next()  		获取信息，但不跳转
		}
		
		模板中路由钩子函数
		beforeRouteEnter: (to, from, next) => {
			console.log('ready into params');
			next();
		},
		beforeRouteLeave: (to, from, next) => {
			console.log('ready goout params');
			next();
		}
	
	编程式导航：
		this.$router.go(-1) // 后退
		this.$router.go(1)	// 前进
		this.$router.push('/XXX') // 跳转到指定路径
	
	
	