1.webpack 4 不是必须要有配置文件.
	./src/index.js
	
2.mode
	"build": "webpack --mode production",  // 生产模式	main.js压缩
    "dev": "webpack --mode development"		// 开发模式	main.js未压缩
	
3.覆盖默认 entry(入口)/output(输出)
	"scripts": {
		"dev": "webpack --mode development ./foo/src/js/index.js --output ./foo/main.js",
		"build": "webpack --mode production ./foo/src/js/index.js --output ./foo/main.js"
	}
	
4.用 Babel 转译 Javascript ES6
	Babel 7 的相关依赖包需要加上 @babel scope。一个主要变化是 presets 设置由原来的 env 换成了 @babel/preset-env, 可以配置 targets, useBuiltIns 等选项用于编译出兼容目标环境的代码。其中 useBuiltIns 如果设为 "usage"，Babel 会根据实际代码中使用的 ES6/ES7 代码，以及与你指定的 targets，按需引入对应的 polyfill，而无需在代码中直接引入 import '@babel/polyfill'，避免输出的包过大，同时又可以放心使用各种新语法特性。

	babel-loader: 用 babel 转换 ES6 代码需要使用到 babel-loader
	@babel-preset-env： 默认情况下是等于 ES2015 + ES2016 + ES2017，也就是说它对这三个版本的 ES 语法进行转化。
	@babel/core：babel 核心库

	
	npm i babel-loader @babel/core @babel/preset-env -D
	
	.babelrc
	{
	  "presets": [
		[
		  "@babel/preset-env",
		  {
			"modules": false,
			"targets": {
			  "browsers": ["> 1%", "last 2 versions", "not ie <= 8"]
			},
			"useBuiltIns": "usage"
		  }
		]
	  ]
	}

5.HTML webpack 插件(HTML绑定)
	npm i html-webpack-plugin html-loader --save-dev	
	
6.提取css(4.2.0以后版本)
	npm i mini-css-extract-plugin css-loader --save-dev	
		
7.webpack 4：webpack dev server热更新
	npm i webpack-dev-server --save-dev
	  "start": "webpack-dev-server --mode development --open"
		
				
		
		
		